import tkinter as tk
from tkinter import ttk, filedialog
from pathlib import Path
import re
import hashlib
from datetime import datetime
import threading
import syntax_highlighter
from ttkthemes import ThemedTk

class MalwareScanner:
    def __init__(self):
        self.root = ThemedTk(theme="arc")  # Modern theme
        self.root.title("Security File Scanner")
        self.root.geometry("1200x800")
        
        self.setup_ui()
        self.setup_drag_drop()
        
    def setup_ui(self):
        # Main container
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # File tree view
        self.tree_frame = ttk.Frame(self.main_frame)
        self.tree_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        self.file_tree = ttk.Treeview(self.tree_frame)
        self.file_tree.pack(fill=tk.BOTH, expand=True)
        
        # Scan results
        self.results_frame = ttk.Frame(self.main_frame)
        self.results_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Progress bar
        self.progress = ttk.Progressbar(self.results_frame, mode='determinate')
        self.progress.pack(fill=tk.X, pady=5)
        
        # Buttons
        self.button_frame = ttk.Frame(self.results_frame)
        self.button_frame.pack(fill=tk.X, pady=5)
        
        self.scan_btn = ttk.Button(self.button_frame, text="Select File", command=self.select_file)
        self.scan_btn.pack(side=tk.LEFT, padx=5)
        
        self.folder_btn = ttk.Button(self.button_frame, text="Select Folder", command=self.select_folder)
        self.folder_btn.pack(side=tk.LEFT, padx=5)
        
        # Results text area with syntax highlighting
        self.results_text = tk.Text(self.results_frame, wrap=tk.WORD, bg='#282c34', fg='white')
        self.results_text.pack(fill=tk.BOTH, expand=True)

    def setup_drag_drop(self):
        self.root.drop_target_register(DND_FILES)
        self.root.dnd_bind('<<Drop>>', self.handle_drop)

    def handle_drop(self, event):
        file_path = event.data
        self.scan_path(file_path)

    def select_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            self.scan_path(file_path)

    def select_folder(self):
        folder_path = filedialog.askdirectory()
        if folder_path:
            self.scan_path(folder_path)

    def scan_path(self, path):
        # Start scanning in a separate thread
        thread = threading.Thread(target=self._scan_thread, args=(path,))
        thread.start()

    def _scan_thread(self, path):
        # Reset progress
        self.progress['value'] = 0
        self.results_text.delete(1.0, tk.END)
        
        patterns = [
            (r'eval\s*\(.*\)', 'Potential code execution'),
            (r'exec\s*\(.*\)', 'Potential code execution'),
            (r'os\.system\s*\(.*\)', 'System command execution'),
            (r'subprocess\..*\(.*\)', 'Process execution'),
            (r'socket\..*\(.*\)', 'Network activity'),
        ]

        path_obj = Path(path)
        if path_obj.is_file():
            self._scan_file(path_obj, patterns)
        else:
            self._scan_folder(path_obj, patterns)

    def _scan_file(self, file_path, patterns):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            for pattern, description in patterns:
                matches = re.finditer(pattern, content)
                for match in matches:
                    self.highlight_threat(f"[WARNING] {description} found in {file_path}:\n")
                    self.highlight_code(match.group(), match.start(), match.end())
                    
        except Exception as e:
            self.results_text.insert(tk.END, f"Error scanning {file_path}: {str(e)}\n")

    def highlight_threat(self, text):
        self.results_text.insert(tk.END, text, 'warning')

    def highlight_code(self, code, start, end):
        self.results_text.insert(tk.END, f"{code}\n", 'code')

if __name__ == "__main__":
    scanner = MalwareScanner()
    scanner.root.mainloop()
