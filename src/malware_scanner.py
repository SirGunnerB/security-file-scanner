import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from pathlib import Path
import re
import threading
from datetime import datetime
import csv

class MalwareScanner:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Security File Scanner")
        self.root.geometry("1200x800")
        
        # Initialize counters
        self.files_scanned = 0
        self.issues_found = 0
        self.scan_start_time = None
        
        # Configure colors
        self.bg_color = '#2e2e2e'
        self.fg_color = 'white'
        self.button_color = '#404040'
        
        self.root.configure(bg=self.bg_color)
        self.setup_ui()
        
    def setup_ui(self):
        # Main frame
        self.main_frame = tk.Frame(self.root, bg=self.bg_color)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Stats frame
        self.stats_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.stats_frame.pack(fill=tk.X, pady=5)
        
        # Stats labels
        self.files_label = tk.Label(
            self.stats_frame,
            text="Files Scanned: 0",
            bg=self.bg_color,
            fg=self.fg_color
        )
        self.files_label.pack(side=tk.LEFT, padx=5)
        
        self.issues_label = tk.Label(
            self.stats_frame,
            text="Issues Found: 0",
            bg=self.bg_color,
            fg=self.fg_color
        )
        self.issues_label.pack(side=tk.LEFT, padx=5)
        
        # Search bar
        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(self.stats_frame, textvariable=self.search_var, width=30)
        self.search_entry.pack(side=tk.LEFT, padx=5)
        self.search_entry.bind("<KeyRelease>", self.filter_results)
        
        # Buttons frame
        self.button_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.button_frame.pack(fill=tk.X, pady=5)
        
        # Create buttons
        self.scan_btn = tk.Button(
            self.button_frame, 
            text="Select File",
            command=self.select_file,
            bg=self.button_color,
            fg=self.fg_color,
            relief=tk.FLAT,
            padx=20,
            pady=10
        )
        self.scan_btn.pack(side=tk.LEFT, padx=5)
        
        self.folder_btn = tk.Button(
            self.button_frame,
            text="Select Folder",
            command=self.select_folder,
            bg=self.button_color,
            fg=self.fg_color,
            relief=tk.FLAT,
            padx=20,
            pady=10
        )
        self.folder_btn.pack(side=tk.LEFT, padx=5)
        
        # Save Report button
        self.save_btn = tk.Button(
            self.button_frame,
            text="Save Report",
            command=self.save_report,
            bg=self.button_color,
            fg=self.fg_color,
            relief=tk.FLAT,
            padx=20,
            pady=10,
            state=tk.DISABLED
        )
        self.save_btn.pack(side=tk.LEFT, padx=5)
        
        # Progress bar
        self.progress = ttk.Progressbar(
            self.main_frame,
            mode='determinate'
        )
        self.progress.pack(fill=tk.X, pady=5)
        
        # Results text
        self.results_text = tk.Text(
            self.main_frame,
            wrap=tk.WORD,
            bg='#282c34',
            fg=self.fg_color,
            insertbackground=self.fg_color
        )
        self.results_text.pack(fill=tk.BOTH, expand=True)
        
        # Configure text tags
        self.results_text.tag_configure('warning', foreground='#ff6b6b')
        self.results_text.tag_configure('code', foreground='#61afef')
        self.results_text.tag_configure('info', foreground='#98c379')
        
    def select_file(self):
        file_path = filedialog.askopenfilename(
            title="Select File to Scan",
            filetypes=[
                ("All Files", "*.*"),
                ("Python Files", "*.py"),
                ("Lua Files", "*.lua"),
                ("JavaScript Files", "*.js")
            ]
        )
        if file_path:
            self.scan_path(file_path)
            
    def select_folder(self):
        folder_path = filedialog.askdirectory(title="Select Folder to Scan")
        if folder_path:
            self.scan_path(folder_path)
            
    def scan_path(self, path):
        self.files_scanned = 0
        self.issues_found = 0
        self.scan_start_time = datetime.now()
        
        thread = threading.Thread(target=self._scan_thread, args=(path,))
        thread.start()
        
    def _scan_thread(self, path):
        self.progress['value'] = 0
        self.results_text.delete(1.0, tk.END)
        
        patterns = [
            (r'eval\s*\(.*\)', 'Potential code execution'),
            (r'exec\s*\(.*\)', 'Potential code execution'),
            (r'os\.system\s*\(.*\)', 'System command execution'),
            (r'subprocess\..*\(.*\)', 'Process execution'),
            (r'socket\..*\(.*\)', 'Network activity'),
            (r'requests\..*\(.*\)', 'Network request'),
            (r'urllib\..*\(.*\)', 'URL operation'),
            (r'base64\..*encode.*\(.*\)', 'Base64 encoding'),
            (r'crypto', 'Cryptographic operation'),
            (r'\.encrypt\(.*\)', 'Encryption operation')
        ]
        
        path_obj = Path(path)
        if path_obj.is_file():
            self._scan_file(path_obj, patterns)
        else:
            self._scan_folder(path_obj, patterns)
            
        # Enable save button
        self.save_btn.config(state=tk.NORMAL)
        
        # Show summary
        elapsed = (datetime.now() - self.scan_start_time).total_seconds()
        summary = f"\n{'='*50}\nSCAN SUMMARY\n{'='*50}\n"
        summary += f"Files Scanned: {self.files_scanned}\n"
        summary += f"Issues Found: {self.issues_found}\n"
        summary += f"Scan Time: {elapsed:.1f} seconds\n"
        summary += f"{'='*50}\n"
        
        self.results_text.insert(tk.END, summary, 'info')
            
    def _scan_file(self, file_path, patterns):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            self.files_scanned += 1
            self.files_label.config(text=f"Files Scanned: {self.files_scanned}")
            
            found_issues = False
            for pattern, description in patterns:
                matches = re.finditer(pattern, content)
                for match in matches:
                    found_issues = True
                    self.issues_found += 1
                    self.issues_label.config(text=f"Issues Found: {self.issues_found}")
                    self.highlight_threat(f"[WARNING] {description} found in {file_path}:\n")
                    self.highlight_code(match.group())
                    
            if not found_issues:
                self.results_text.insert(tk.END, f"No issues found in {file_path}\n", 'info')
                    
        except Exception as e:
            self.results_text.insert(tk.END, f"Error scanning {file_path}: {str(e)}\n")
            
    def _scan_folder(self, folder_path, patterns):
        files = list(folder_path.rglob('*'))
        total_files = len(files)
        
        for i, file_path in enumerate(files):
            if file_path.is_file():
                self._scan_file(file_path, patterns)
                self.progress['value'] = ((i + 1) / total_files) * 100
                self.root.update_idletasks()
                
    def highlight_threat(self, text):
        self.results_text.insert(tk.END, text, 'warning')
        
    def highlight_code(self, code):
        self.results_text.insert(tk.END, f"{code}\n", 'code')
        
    def save_report(self):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("CSV files", "*.csv")],
            initialfile=f"security_scan_{timestamp}"
        )
        
        if filename:
            with open(filename, 'w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(["File", "Line", "Severity", "Description"])
                for line in self.results_text.get(1.0, tk.END).strip().split('\n'):
                    if "[WARNING]" in line:
                        # Extract relevant information from the line
                        parts = line.split(" found in ")
                        if len(parts) == 2:
                            description = parts[0].replace("[WARNING] ", "").strip()
                            file_info = parts[1].strip()
                            writer.writerow([file_info, "", "WARNING", description])
            messagebox.showinfo("Success", f"Report saved to {filename}")

    def filter_results(self, event):
        search_term = self.search_var.get().lower()
        self.results_text.delete(1.0, tk.END)
        
        # Re-scan and filter results based on the search term
        # This is a simple implementation; you may want to store results in a list for better performance
        # and to avoid rescanning.
        # For now, we will just display the original results again.
        self.results_text.insert(tk.END, "Displaying filtered results...\n", 'info')

if __name__ == "__main__":
    scanner = MalwareScanner()
    scanner.root.mainloop()
